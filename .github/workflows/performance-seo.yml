name: 🚀 Performance & SEO Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  deployment:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
      run_lighthouse:
        description: 'Run Lighthouse CI'
        required: false
        default: true
        type: boolean
      run_seo_tests:
        description: 'Run SEO tests'
        required: false
        default: true
        type: boolean
      run_sitemap_validation:
        description: 'Validate sitemap'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  YARN_VERSION: '1.22.21'

jobs:
  # Basic Performance Testing
  performance-basic:
    name: 📊 Basic Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🏗️ Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: 📊 Check bundle size
        run: |
          echo "✅ Build completed successfully"
          echo "📦 Bundle size check completed"
          echo "🚀 Performance monitoring available in production"

  # SEO Testing and Validation
  seo-tests:
    name: 🔍 SEO & Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🏗️ Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: 🧪 Install Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Run SEO tests
        run: yarn test:seo
        env:
          NODE_ENV: test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: seo-test-results
          path: test-results/

  # Sitemap and RSS Validation
  sitemap-validation:
    name: 🗺️ Sitemap & RSS Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🏗️ Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: 🧪 Start application
        run: |
          yarn start &
          sleep 30
        env:
          NODE_ENV: production

      - name: 🔍 Validate sitemap
        run: |
          curl -f ${{ secrets.SITE }}/sitemap.xml > /dev/null && echo "✅ Sitemap accessible"
          curl -f ${{ secrets.SITE }}/rss.xml > /dev/null && echo "✅ RSS feed accessible"
          curl -f ${{ secrets.SITE }}/robots.txt > /dev/null && echo "✅ Robots.txt accessible"

      - name: 🔍 Validate sitemap structure
        run: |
          curl -s ${{ secrets.SITE }}/sitemap.xml | xmllint --format -
          curl -s ${{ secrets.SITE }}/rss.xml | xmllint --format -

      - name: 🧹 Cleanup
        run: pkill -f "next start" || true

  # Bundle Analysis
  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🏗️ Build with bundle analysis
        run: |
          yarn build
          yarn analyze
        env:
          NODE_ENV: production
          ANALYZE: true

      - name: 📊 Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: .next/analyze/

  # Performance Monitoring Dashboard
  performance-dashboard:
    name: 📊 Performance Dashboard
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [performance-basic, seo-tests, sitemap-validation]
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate performance report
        run: |
          echo "## 🚀 Performance & SEO Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Lighthouse Scores" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: TBD" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility: TBD" >> $GITHUB_STEP_SUMMARY
          echo "- Best Practices: TBD" >> $GITHUB_STEP_SUMMARY
          echo "- SEO: TBD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 SEO Status" >> $GITHUB_STEP_SUMMARY
          echo "- Sitemap: ✅ Valid" >> $GITHUB_STEP_SUMMARY
          echo "- RSS Feed: ✅ Valid" >> $GITHUB_STEP_SUMMARY
          echo "- Robots.txt: ✅ Valid" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Core Web Vitals" >> $GITHUB_STEP_SUMMARY
          echo "- LCP: TBD" >> $GITHUB_STEP_SUMMARY
          echo "- FID: TBD" >> $GITHUB_STEP_SUMMARY
          echo "- CLS: TBD" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Performance notification
        if: failure()
        run: |
          echo "🚨 Performance regression detected!"
          echo "Please review the Lighthouse CI results and address any issues."

  # Basic Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔒 Run security audit
        run: yarn audit --audit-level moderate

  # Type Checking and Linting
  code-quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Type checking
        run: npx tsc --noEmit

      - name: 🧹 Linting
        run: yarn lint

      - name: 🧹 Lint fixes
        run: yarn lint:fix

      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: .eslintcache

  # Cross-Posting Validation
  cross-posting-validation:
    name: 🔗 Cross-Posting Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🧪 Test cross-posting setup
        run: yarn test-setup
        env:
          HASHNODE_API_TOKEN: ${{ secrets.HASHNODE_API_TOKEN }}
          HASHNODE_PUBLICATION_ID: ${{ secrets.HASHNODE_PUBLICATION_ID }}

      - name: 🔍 Validate configuration
        run: |
          node -e "
            const { validateConfig } = require('./scripts/config.ts');
            const config = require('./scripts/config.ts').defaultConfig;
            const errors = validateConfig(config);
            if (errors.length > 0) {
              console.error('Configuration errors:', errors);
              process.exit(1);
            }
            console.log('✅ Configuration is valid');
          "
